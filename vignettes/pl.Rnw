%% \VignetteIndexEntry{Computing profit and loss}
\documentclass[a4paper,11pt]{article}
\SweaveInput{pre.tex}
\begin{document}
\title{Computing profit and (or) loss}
\author{Enrico Schumann\\\url{es@enricoschumann.net}}

{\raggedright{\LARGE Profit and (or) loss}}\medskip

\noindent Enrico Schumann\\
\noindent \url{es@enricoschumann.net}\\
\bigskip

<<echo=false>>=
require("PMwR")
require("zoo")
@

\begin{framed}
  \noindent This file is no longer updated and will be removed in a
  future release of the package. Please see the Manual.
\end{framed}


\section{The simple case}

We have an account, currency is euro.  We buy one asset at a price of
100~euro and sell it again at 102~euro.  We have made a profit of
2~euros.  This simple case happens often enough to make the required
computation simple as well.  Computing profit-or-loss (\pl) can be handled
through the function \texttt{pl}.
<<>>=
pl(price  = c(100, 102), 
    amount = c(  1,  -1))
@ 
Now suppose that a trader bought one~unit at 50, one~unit at 90 and
sold two~units at 100, resulting in a profit of 60.  But suppose that
the actual order of the trades was\medskip

buy at 90 \quad $\Rightarrow$ \quad buy at 50 \quad $\Rightarrow$ \quad
sell at 100\,.\medskip

\noindent Even if we know nothing about what was traded and when, some
information is provided by the order of the trades: the position had a
drawdown of at least~40 before it recovered.  For situations like
this, the argument \texttt{along.timestamp} can be used. (Note that we
do not provide an actual timestamp, in which case the function will
implicitly use integers 1, 2, \ldots, \texttt{length(amount)}\,.)
<<>>=
pl(price  = c( 90, 50, 100), 
    amount = c(  1,  1,  -2), along.timestamp = TRUE)
@ 
With no further arguments, the function will compute the
running position and evaluate it at every trade with the trade's
price.  This may not be accurate because of bid--ask spreads or other
transaction costs, but it provides more information than only
computing the \pl\ for the trades.
<<>>=
J <- journal(price     = c( 90, 50, 100), 
              amount    = c(  1,  1,  -2),
              timestamp = c(  2,  4,   7))
pl(J, along.timestamp = FALSE)
@ 
Suppose we also have a time series of the prices between times 1
and~10.  We can evaluate the position at every time instant, and then
plot position, \pl\ and the price of the traded instrument.

<<>>=
## [TODO]
price <- c(100,90,70,50,60,80,100,90,110,105)

## position
position(J, when = 1:10)

## pl
## value position at when = 1:10
## compute value if journal at 1:10 => subtract

@ 

A more-useful example for \texttt{pl} with \texttt{along.timestamp} is
a trading history of a high-frequency strategy.  Suppose for example
we had traded EURUSD 200~times in single day and wished to plot the
result.  At such a frequency, the prices at which the trades were
executed is useful to value any open position.

<<>>=
## [TODO]
@ 
We may also want to compute the \pl\ between two points in
time.  If our only data source is a journal, this may be impossible
since we need to evaluate the position at both points in time.  A simple
example follows; the data first.
<<echo=false>>=
timestamp <- 1:20
amount <- c(-5, 5, 5, -5, -5, 5, 5, 5, 5, 
            -5, 5, 5, -5, 5, 5, -5, -5, -5, 
            -5, -5)
price <- c(106, 101, 110, 110, 105, 105, 105, 104, 110, 104, 
           103, 108, 106, 102, 108, 107, 103, 104, 109, 104)
(J <- journal(timestamp = timestamp, amount = amount, price = price))
@ 

Suppose we want the pl between times 5 and~8. Conceptually, it is
simple: we first compute the position at~5 and treat it as a trade.
Clearly, for this we need the price of the instruments in the position
at timestamp~5.  Then we extract all the trades that occured later
than 5, up to 8.  The final position, again, would be treated as a
trade, but with signs reversed. That, we close the position, if any
exists.  Here, again, we need the prices of the instruments.

The function \texttt{pl} does (most of) these tasks for us.
<<>>=
from <- 5
to   <- 8
price.from <- 106
price.to   <- 105
position.from <- position(J, when = from)
trades <- J[J$timestamp > from & J$timestamp <= to]

pl(trades, 
   initial.position = position.from, 
   initial.price = price.from,
   current.price = price.to)   
@ 


You can also use this mechanism if you wish to compute the \pl\
of a complete journal, but with some positions not closed yet.  The
simplest example: a journal of just one trade.
<<>>=
(J <- J[1])
@ 

There is no way to tell the pl of this trades\ldots 
<<>>=
pl(J)
@ 

\ldots unless the current price is supplied.
<<>>=
pl(J, current.price = 105)
@ 

\section{More  complicated cases}


%% TODO:

%% - example EUR investor buys INTC

%% - pure FX portfolio

Unfortunately, in real life computing \pl\ is often more complicated:

\begin{itemize}

\item One asset-price unit may not translate into one currency unit:
  we have multipliers or contract factors.  That is easy to solve by
  computing effective position sizes, but it may take some thinking to
  come up with a reusable scheme (eg, looking up multipliers in a
  table).
    
\item Asset positions may map into cashflows in non-obvious ways.  The
  simple case is the delay in actual payment and delivery of an asset,
  which is often two or three days.  The more problematic cases are
  derivatives with daily adjustments of margins.

\item Assets may be denominated in various currencies.
  
\item Currencies themselves may be assets in the portfolio.  Depending
  on how they are traded (cash, forwards, \emph{\&c.}), computing \pl\ 
  may not be straightforward.
\end{itemize}

How (or rather: to what degree) these troubles are handled is, as
always, up to the user.  For a single instrument, computing
profit/loss in units of the instrument is always meaningful (though,
perhaps, not always intuitive).  But \emph{adding up} the profits and
losses of several assets often does not work because of multipliers or
different currencies.  The simplest and most transparent way is then
to manipulate the journal before \pl\ is computed (eg, multiply
notionals by their multipliers).




We look at two examples: (i)~computing the \pl\ of several assets in
currency units; and (ii)~computing time-weighted returns of a
portfolio of assets.

\subsection{Several assets}

In this example we compute the \pl\ in currency units of a portfolio
over time.  We start with the following journal.

<<echo=false>>=
## dput(ISOdatetime(2013,c(11,11,12,12,11,12), c(28,28,2,3,27,2), 
##                     c(9,12,13,9,9,13),c(35,50,21,57,52,54),0))
timestamp <- structure(c(1385627700, 1385639400, 1385986860, 1386061020, 1385542320, 
                         1385988840), class = c("POSIXct", "POSIXt"), tzone = "")

(J <- journal(amount    = c(100,100,-50,-150, 100,-50),
             timestamp = timestamp,
             price = c(11.6, 11.62, 11.67, 11.47, 25.1,26.29),
             instrument = c(rep("DTE", 4), rep("DPW", 2))))
@ 
We shall compute end-of-day \pl\ of these trades.  In case you
wondered: \textsc{dte} stands for Deutsche Telekom and \textsc{dpw} is
Deutsche Post, both traded on \textsc{xetra}.  Thus, end-of-day is
17:30 in Frankfurt am Main, Germany.

(There is nothing special about end-of-day.  We could just as well
have decided to have hourly numbers, say.  But I would like to keep
this example small.)  The prices at these timestamps are stored
in a matrix \texttt{price.table}.
<<echo=false>>=
price.table <- structure(c(25.71, 25.965, 26.03, 26.32, 25.305,
                           11.65, 11.655, 11.685, 11.62, 11.375), 
                         .Dim = c(5L, 2L), 
                         .Dimnames = list(NULL, c("DPW", "DTE")))

## times <- as.POSIXct(c("2013-11-27 17:30:00", "2013-11-28 17:30:00", "2013-11-29 17:30:00", 
##                       "2013-12-02 17:30:00", "2013-12-03 17:30:00"))
when <- times <- structure(c(1385569800, 1385656200, 1385742600, 
                     1386001800, 1386088200), 
                   class = c("POSIXct", "POSIXt"), 
                   tzone = "")
rownames(price.table) <- as.character(times)
@ 
<<>>=
price.table
@ 

\subsubsection*{Step 1: compute value of portfolio}

We first need the position sizes at the timestamps at which we want to
compute \pl.  We store them in a vector \texttt{when}.
<<>>=
when
@ 
The position at \texttt{when} is quickly computed.
<<>>=
(pos <- position(J, when = when))
@ 
Note that each element in the position matrix corresponds to an
element in the matrix \texttt{price.table}.  That is, the rows refer
to the timestamps:
<<>>=
attr(pos, "timestamp")
@ 
The columns must be ordered like the instruments:
<<>>= 
attr(pos, "instrument")
@ 
Thus, we need to multiply both matrices element-by-element, which is
exactly what the function \texttt{valuation} does.  A warning: the
function does currently not at all check \texttt{price.table}.
<<eval=false>>=
PMwR:::valuation(pos, price.table = price.table)
@ 
We care about the row sums of the results.
<<eval=false>>= 
(v <- PMwR:::valuation(pos, price.table = price.table, do.sum = TRUE))
@
If the assets have specific multipliers, we can pass them as a named
vector.  (That is the preferred way, at least.  An unnamed vector will
do as well, as will a single number, which is recycled.)
<<eval=false>>=
PMwR:::valuation(pos, price.table = price.table, 
          multiplier = c(DTE = 5, DPW = 0.5))
@

\subsubsection*{Step 2: compute cashflows that led to portfolio}

We create a vector \texttt{cf} that will store the cashflows.
<<>>=
cf <- numeric(length(attr(pos, "timestamp")))
names(cf) <- as.character(attr(pos, "timestamp"))
@ 


<<>>=
## tmp <- PMwR:::valuation(J)
## tmp$timestamp <- pos$timestamp[PMwR:::matchOrNext(tmp$timestamp, pos$timestamp)]
## cash <- aggregate(tmp$amount, list(tmp$timestamp), sum)
## cf[match(cash[[1]], pos$timestamp)] <- cash[[2]]
## (v.net <- v + cumsum(cf))
@ 

TODO: check -- create interface journal/when/price.table?

\subsubsection*{Summary}

\begin{enumerate}
\item Fix \texttt{when}; compute position at \texttt{when}.
\item Prepare a matrix price.table of \texttt{length(when)} rows,
  whose columns correspond to the assets in the portfolio.
\item Call \texttt{valuation(position)} and store the result as
  \texttt{v}.
\item Call \texttt{valuation(journal)}; map the timestamps of the new
  journal to \texttt{when}; sum the cashflows by timestamp; subtract
  the resulting cashflows from \texttt{v}.
\end{enumerate}

To compute returns, choose a suitable total portfolio value and divide
by it.



\newpage
\appendix
<<results=tex>>=
toLatex(sessionInfo())
@ 
\end{document}
